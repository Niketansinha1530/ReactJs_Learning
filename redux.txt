* React may kuch component class base bhi bantay hai. abhi jo hum banatay hai wo saray function base banatay hai.


 * redux is also a state management library .


 * flux  redux se bhi phaylay aya tha.

 * flux help in data flow  

 * then after better version flow of data we introducing redux.


In redux changes is only made from reducers.
*****************************************************************

Redux came into the world as a solution to manage the state of complex web applications more efficiently. It's like having a big storage room (the store) where you keep all the important information about your application, organized neatly on shelves (reducers).

Before Redux, managing this information could get messy. Developers had to manually pass data around between different parts of their app, and as the app grew, things could easily get confusing or out of control.

Redux changed the game by introducing a single source of truth for your app's state. Instead of scattered data, everything important is stored in one central place. This makes it easier to understand and maintain your app's state, even as it becomes more complex.

**************************************************************

*A Predictable State Container for JS Apps

it is a independent library it works with react,vue,angular and many more library.


**********************************************

To use Redux their is large setup as compare to context api its take 2 to 3 times more configuration setup so 

Now the new update less setup required in reduxtool kit (RTK)

***********************************************************************************************88
Redux Toolkit emerged as a response to common pain points and boilerplate code that developers encountered when using plain Redux. While Redux provided a robust solution for managing state in applications, setting it up and maintaining it required writing a significant amount of boilerplate code.

Redux Toolkit aimed to streamline this process by providing a set of utilities and conventions to simplify Redux development. Here's why it came into existence:

 - Boilerplate Reduction: Redux Toolkit drastically reduces the amount of boilerplate code needed to set up and maintain a Redux store. It provides a concise and opinionated API for common Redux tasks, such as creating slices, defining reducers, and configuring the store.

 - Normalized Workflow: With Redux Toolkit, developers can follow a standardized workflow for managing state in Redux applications. This normalization of development practices helps improve code consistency and maintainability across projects.

 - Encourages Best Practices: Redux Toolkit encourages the adoption of best practices for Redux development, such as immutable state updates, separation of concerns, and single responsibility principle. It provides built-in utilities like createSlice for defining Redux slices, which promote cleaner and more maintainable code.

 - Out-of-the-box Features: Redux Toolkit comes with several built-in features, such as immer integration for immutable updates, Redux DevTools configuration, and simplified asynchronous action handling through createAsyncThunk. These features make common Redux tasks easier and more intuitive for developers.

 - Performance Optimizations: Redux Toolkit includes performance optimizations under the hood, such as memoized selector functions generated by createSlice. These optimizations help improve the performance of Redux applications by reducing unnecessary re-renders and computations.

 *****************************************
npm install @reduxjs/toolkit      *
 npm install react-redux                                *

                                  *